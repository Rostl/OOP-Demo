CREATE SCHEMA employee_lesson;


SET SEARCH_PATH = employee_lesson;

CREATE TABLE employee_lesson.company
(
    id   SERIAL PRIMARY KEY,
    name CHARACTER VARYING(128) UNIQUE NOT NULL
);

CREATE TABLE employee_lesson.employee
(
    id         SERIAL PRIMARY KEY,
    name       CHARACTER VARYING(256),
    company_id INTEGER REFERENCES company (id)
);

CREATE TABLE employee_lesson.employee
(
    id         SERIAL PRIMARY KEY,
    name       CHARACTER VARYING(256),
    birthday   date NOT NULL,
    company_id INTEGER,
    FOREIGN KEY (company_id) REFERENCES company (id)
);

CREATE TABLE salry
(
    id          BIGSERIAL PRIMARY KEY,
    employee_id BIGINT,
    amout       INTEGER  NOT NULL CHECK ( amout > 0 ),
    month       SMALLINT NOT NULL,
    FOREIGN KEY (employee_id) REFERENCES employee_lesson.employee (id)
);

INSERT INTO company(name)
VALUES ('IBA'),
       ('EPAM'),
       ('Google'),
       ('IT-ransition'),
       ('Godel Technologis');

INSERT INTO employee_lesson.employee(name, birthday, company_id)
VALUES ('Гари', '1990-05-26', NULL),
       ('Света', '1986-08-13', (SELECT id FROM company c WHERE c.name = 'IBA')),
       ('Надя', '1993-04-05', (SELECT id FROM company c WHERE c.name = 'EPAM')),
       ('Полина', '1987-10-10', (SELECT id FROM company c WHERE c.name = 'Google')),
       ('Саша', '1990-08-20', (SELECT id FROM company c WHERE c.name = 'IBA')),
       ('Дима', '1985-03-25', (SELECT id FROM company c WHERE c.name = 'EPAM')),
       ('Андрей', '1980-11-04', (SELECT id FROM company c WHERE c.name = 'IT-ransition')),
       ('Олег', '1995-05-02', (SELECT id FROM company c WHERE c.name = 'Google')),
       ('Руслан', '1990-06-12', (SELECT id FROM company c WHERE c.name = 'Godel Technologis')),
       ('Антон', '1993-01-23', (SELECT id FROM company c WHERE c.name = 'IBA')),
       ('Виталий', '1986-08-26', (SELECT id FROM company c WHERE c.name = 'Godel Technologis')),
       ('Алексей', '1987-12-26', (SELECT id FROM company c WHERE c.name = 'IT-ransition'));

SELECT name AS n, birthday AS b
FROM employee_lesson.employee;


INSERT INTO salry(amout, month, employee_id)
VALUES (1000, 1, 1),
       (1000, 2, 1),
       (1000, 3, 1),
       (1000, 4, 1),
       (550, 6, 1),
       (1000, 1, 2),
       (550, 2, 2),
       (600, 3, 2),
       (800, 4, 2),
       (1000, 6, 2),
       (1000, 1, 3),
       (1500, 2, 3),
       (1300, 3, 3),
       (1200, 4, 3),
       (1200, 6, 3),
       (450, 1, 4),
       (450, 2, 4),
       (450, 3, 4),
       (550, 4, 4),
       (5500, 6, 4);



SELECT *
FROM salry;

SELECT em.name, s.amout
FROM employee em,
     salry s
WHERE em.id = 6
  AND em.id = s.employee_id;

SELECT em.name, s.amout
FROM employee em
         JOIN salry s ON s.employee_id = em.id
WHERE em.id = 6;

SELECT c.name, em.name
FROM company c
         INNER JOIN employee em ON em.company_id = c.id
WHERE c.name = 'IBA';

SELECT c.name, em.name
FROM employee em
         Left JOIN company c ON em.company_id = c.id AND c.name = 'IBA';

SELECT em.name, avg(s.amout)
FROM employee em
         JOIN salry s ON em.id = employee_id
GROUP BY em.id;

SELECT em.name, avg(s.amout)
FROM employee em
         JOIN salry s ON em.id = employee_id
GROUP BY em.id
HAVING avg(s.amout) > 1000;

SELECT c.name, count(em.name)
FROM company c
         LEFT JOIN employee em ON c.id = em.company_id
GROUP BY c.id;

SELECT c.name,
       COALESCE(avg(s.amout), 0) avg_amount
FROM company c
         LEFT JOIN employee em ON c.id = em.company_id
         LEFT JOIN salry s ON s.employee_id = em.id
GROUP BY c.id;

SELECT em.name,
       s.amout,
       s.month,
       rank() OVER (PARTITION BY em.id
           ORDER BY s.month DESC) rank
FROM employee em
         LEFT JOIN company c ON em.company_id = c.id
         LEFT JOIN salry s ON s.employee_id = em.id
WHERE c.name = 'IBA';

SELECT t.name, avg(t.amout)
FROM (
         SELECT em.name,
                s.amout,
                s.month,
                rank() OVER (PARTITION BY em.id
                    ORDER BY s.month DESC) rank
         FROM employee em
                  LEFT JOIN company c ON em.company_id = c.id
                  LEFT JOIN salry s ON s.employee_id = em.id
         WHERE c.name = 'IBA') t
where t.rank IN (1, 2)
GROUP BY t.name;

---------------------------------------------------------------------------

CREATE SCHEMA author_lesson;

SET SEARCH_PATH = author_lesson;

CREATE TABLE author
(
    id        BIGSERIAL PRIMARY KEY,
    name      CHARACTER VARYING,
    birthday  date,
    coutry_id INTEGER,
    FOREIGN KEY (coutry_id) REFERENCES coutry (id)
);

CREATE TABLE coutry
(
    id         BIGSERIAL PRIMARY KEY,
    name       CHARACTER VARYING(128),
    population INTEGER,
    area       INTEGER,
    language   CHARACTER VARYING(64)
);

INSERT INTO coutry (name, population, area, language)
VALUES ('Беларусь', 9, 205, 'ru'),
       ('Россия', 140, 9000, 'ru'),
       ('Франция', 50, 501, 'fr'),
       ('Германия', 9, 205, 'de'),
       ('Украина', 80, 895, 'ua'),
       ('Великобритания', 100, 423, 'en'),
       ('Австралия', 230, 5000, 'en'),
       ('Канада', 140, 7240, 'en'),
       ('Китай', 1500, 8222, 'ch');

INSERT INTO author(name, birthday, coutry_id)
VALUES ('Джек Лондон', '1940-07-09', (SELECT id FROM coutry c WHERE c.name = 'Великобритания')),
VALUES ('Шилдт', '1880-06-12', (SELECT id FROM coutry c WHERE c.name = 'Канада')),
       ('Браун', '1850-10-15', (SELECT id FROM coutry c WHERE c.name = 'Канада')),
       ('Толстой', '1830-04-22', (SELECT id FROM coutry c WHERE c.name = 'Россия')),
       ('Пушкин', '1800-01-01', (SELECT id FROM coutry c WHERE c.name = 'Россия'));

SELECT a.name as имя_автора, a.birthday, c.language
FROM author a
         JOIN coutry c ON a.coutry_id = c.id;

CREATE TABLE genre
(
    id   SMALLSERIAL PRIMARY KEY,
    name CHARACTER VARYING(128) UNIQUE NOT NULL
);

INSERT INTO genre(name)
VALUES ('Фантастика'),
       ('Поэзия'),
       ('Наука'),
       ('Драма'),
       ('Стихи');

CREATE TABLE book
(
    id        BIGSERIAL PRIMARY KEY,
    name      CHARACTER VARYING(128) NOT NULL,
    amount    INTEGER                NOT NULL,
    genre_id  SMALLINT,
    author_id BIGINT                 NOT NULL,
    FOREIGN KEY (genre_id) REFERENCES genre (id),
    FOREIGN KEY (author_id) REFERENCES author (id)
);

DROP TABLE book;

INSERT INTO book (name, amount, genre_id, author_id)
VALUES ('Программирование Java 8', 1600, (SELECT id FROM genre g WHERE g.name = 'Наука'),
        (SELECT id FROM author a WHERE a.name = 'Шилдт')),
       ('Программирование Java 7', 1200, (SELECT id FROM genre g WHERE g.name = 'Наука'),
        (SELECT id FROM author a WHERE a.name = 'Шилдт')),
       ('Программирование Java 6', 900, (SELECT id FROM genre g WHERE g.name = 'Наука'),
        (SELECT id FROM author a WHERE a.name = 'Шилдт')),
       ('Евгений Онегин', 100, (SELECT id FROM genre g WHERE g.name = 'Поэзия'),
        (SELECT id FROM author a WHERE a.name = 'Пушкин')),
       ('Капитанская Дочь', 200, (SELECT id FROM genre g WHERE g.name = 'Драма'),
        (SELECT id FROM author a WHERE a.name = 'Пушкин')),
       ('Война и Мир', 2000, (SELECT id FROM genre g WHERE g.name = 'Драма'),
        (SELECT id FROM author a WHERE a.name = 'Толстой')),
       ('Ангелы и демоны', 580, (SELECT id FROM genre g WHERE g.name = 'Фантастика'),
        (SELECT id FROM author a WHERE a.name = 'Браун')),
       ('Код да винчи', 756, (SELECT id FROM genre g WHERE g.name = 'Фантастика'),
        (SELECT id FROM author a WHERE a.name = 'Браун'));

SELECT a.name AS book_author, b.name AS book_name
FROM author a
         LEFT JOIN book b on a.id = b.author_id;

SELECT b.*
FROM book b
         JOIN author a on b.author_id = a.id
WHERE a.coutry_id IN (SELECT c.id FROM coutry c WHERE name = 'Россия');

SELECT b.name, a.name, b.amount, c.name
FROM book b
         JOIN author a on b.author_id = a.id
         JOIN coutry c on a.coutry_id = c.id
WHERE c.name IN ('Россия', 'Канада');

SELECT b.name, a.name, a.birthday
FROM book b
         JOIN author a on b.author_id = a.id
    AND a.birthday >= '1820-01-01';

SELECT b.name, a.name, a.birthday
FROM book b
         JOIN author a on b.author_id = a.id
    AND extract(YEAR FROM a.birthday) >= '1820';

SELECT b.name, a.name, a.birthday
FROM book b
         JOIN author a on b.author_id = a.id
    AND a.birthday BETWEEN '1820-01-01' AND '1840-01-01';

DELETE
FROM book
WHERE UPPER(name) = UPPER('фывфыв');

DELETE
FROM author a
WHERE a.id = 3;

-- 5
SELECT a.name, c.name, COALESCE(avg(b.amount), 0)
FROM author a
         JOIN coutry c on a.coutry_id = c.id
         LEFT JOIN book b on a.id = b.author_id
GROUP BY a.id, c.name
ORDER BY a.birthday;

-- 6
SELECT a.name, a.birthday, c.name, avg(b.amount)
FROM author a
         JOIN book b on a.id = b.author_id
         JOIN coutry c on a.coutry_id = c.id
GROUP BY a.id, c.name
HAVING COALESCE(avg(b.amount)) > 300
ORDER BY a.birthday;
-- 6
SELECT t.*
FROM (SELECT a.name, a.birthday, c.name, avg(b.amount) AS avg_amount
      FROM author a
               JOIN book b on a.id = b.author_id
               JOIN coutry c on a.coutry_id = c.id
      GROUP BY a.id, c.name) t
WHERE t.avg_amount > 300
ORDER BY t.birthday;

SELECT a.name, avg(b.amount)
FROM author a
         JOIN book b ON a.id = b.author_id
GROUP BY a.id
HAVING avg(b.amount) > (SELECT avg(amount) FROM book);


SELECT a.name, avg(b.amount), avg_all
FROM author a
         JOIN book b ON a.id = b.author_id
CROSS JOIN (SELECT avg(amount) FROM book) avg_all
GROUP BY a.id, avg_all;

